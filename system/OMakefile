open build/vs12

configuration.=

debug.=
	extends $(configuration)

	defines[]=
				_DEBUG
				WIN32
				_UNICODE
				UNICODE
	libs[]=
			msvcrtd.lib
			msvcprtd.lib
			kernel32.lib

	compiler_options[]=
				/Od
				/W4
				/EHsc
				/MDd

	linker_options[]=

	to_string()=
				value $(string debug)

#static library prototype
static_library(tc,options,name,files)=
	private.object_files=$(addsuffix .obj,$(files))
	private.library=$(file $(name).lib)

	$(library):$(object_files)
		$(tc.compile_static_library $@, $(object_files), $(options))

	return $(library)


executable(tc, config, name, files, compiler_options, linker_options)=
	private.prefix=$(TMP)/$(tc.to_string)/$(config.to_string)
	private.sources=$(addsuffix .cpp, $(files))
	private.object_files=$(addprefix $(private.prefix)/, $(addsuffix .obj,$(fullname $(files))))
	private.outfile=$(BIN)/$(tc.platform)/$(name)
	private.executable=$(outfile).exe
	private.ilk=$(outfile).ilk
	private.pdb=$(outfile).pdb

	foreach(f, $(files))
		$(absname $(private.prefix)/$(fullname $(f).obj)): $(f).cpp
			mkdir -p $(dirname $@)
			$(tc.compile_object_file $@,$<,$(config.compiler_options) $(compiler_options) $(addprefix /D,$(config.defines)))		


	$(executable):$(private.object_files) :effects: $(private.ilk) $(private.pdb)
		$(tc.link_executable $@, $(object_files), $(config.linker_options) $(linker_options) $(config.libs))

	clean:
		rm -rf $(executable) $(private.ilk) $(private.pdb) $(private.object_files)

	return $(executable)

executable_effects(tc, config, name, files, compiler_options, linker_options)=
	private.prefix=$(TMP)/$(tc.to_string)/$(config.to_string)
	private.sources=$(addsuffix .cpp, $(files))
	private.object_files=$(addprefix $(private.prefix)/, $(addsuffix .obj,$(fullname $(files))))
	private.outfile=$(BIN)/$(tc.platform)/$(name)
	private.executable=$(outfile).exe
	private.ilk=$(outfile).ilk
	private.pdb=$(outfile).pdb

	result=

	foreach(f, $(files))
		result+=$(absname $(private.prefix)/$(fullname $(f).obj))
		export

	result+= $(executable) $(private.ilk) $(private.pdb)

	value $(result)

dynamic_library_effects(tc, config, name, files, compiler_options, linker_options)=
	private.prefix=$(TMP)/$(tc.to_string)/$(config.to_string)
	private.sources=$(addsuffix .cpp, $(files))
	private.object_files=$(addprefix $(private.prefix)/, $(addsuffix .obj,$(fullname $(files))))
	private.outfile=$(BIN)/$(tc.platform)/$(name)
	private.executable=$(outfile).dll
	private.ilk=$(outfile).ilk
	private.pdb=$(outfile).pdb

	result=

	foreach(f, $(files))
		result+=$(absname $(private.prefix)/$(fullname $(f).obj))
		export

	result+= $(executable) $(private.ilk) $(private.pdb)

	value $(result)	

dynamic_library(tc, config, name, files, compiler_options, linker_options)=
	private.prefix=$(TMP)/$(tc.to_string)/$(config.to_string)
	private.sources=$(addsuffix .cpp, $(files))
	private.object_files=$(addprefix $(private.prefix)/, $(addsuffix .obj,$(fullname $(files))))
	private.outfile=$(BIN)/$(tc.platform)/$(name)
	private.executable=$(outfile).dll
	private.ilk=$(outfile).ilk
	private.pdb=$(outfile).pdb

	foreach(f, $(files))
		$(absname $(private.prefix)/$(fullname $(f).obj)): $(f).cpp
			mkdir -p $(dirname $@)
			$(tc.compile_object_file $@,$<,$(config.compiler_options) $(compiler_options) $(addprefix /D,$(config.defines)))		


	$(executable):$(private.object_files) :effects: $(private.ilk) $(private.pdb)
		$(tc.link_dll $@, $(object_files), $(config.linker_options) $(linker_options) $(config.libs))

	clean:
		rm -rf $(executable) $(private.ilk) $(private.pdb) $(private.object_files)

	return $(executable)


#default toolchain
public.toolchain=$(vs_12_x64_toolchain)

#per project setup
public.compiler_options=/I$(dir ./include)
public.linker_options=
public.librarian_options=

files[]= 
		$(file $(string ./main))

.PHONY: all debug clean

.DEFAULT: all

app        	=$(executable $(toolchain), $(debug), lib, $(files), $(compiler_options), $(linker_options))
app_effects	=$(executable_effects $(toolchain), $(debug), lib, $(files), $(compiler_options), $(linker_options))

debug: $(app)

clean: 
	rm -rf $(app_effects)

all: debug

.SUBDIRS: modules












